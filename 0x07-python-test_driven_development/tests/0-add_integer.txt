===========================
0-add_integer.py
===========================

This module defines an two integers sum function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the sum of the two integers. For integers,
the value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 5)
    7

::

    >>> add_integer(2, -5)
    -3

function works with floating-point values.

::

    >>> add_integer(2.0, 5.0)
    7

floats are casted to integers before addition.

::

    >>> add_integer(2.9, 1.1)
    4

::

    >>> add_integer(-2.9, -1.1)
    -1

Floating and non-floating point values can also be combined.

::

    >>> add_integer(0.3, -3)
    -2


Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is
printed for the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
